{"version":3,"sources":["../../src/steps/process-and-validate-plugin-options.ts"],"names":["optionsProcessors","name","test","userPluginOptions","type","MediaItem","limit","processor","helpers","reporter","panic","schema","queryDepth","log","warn","useVerboseStyle","gatsbyStore","store","getState","typeSettings","Object","entries","forEach","typeName","settings","beforeChangeNodePath","beforeChangeNode","usingGatsbyV4OrGreater","absoluteRequirePath","path","isAbsolute","require","resolve","join","program","directory","beforeChangeNodeFn","e","message","processAndValidatePluginOptions","pluginOptions","toString","filteredUserPluginOptions","auth"],"mappings":"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","sourcesContent":["import path from \"path\"\nimport { formatLogMessage } from \"~/utils/format-log-message\"\nimport isInteger from \"lodash/isInteger\"\nimport { IPluginOptions } from \"~/models/gatsby-api\"\nimport { GatsbyNodeApiHelpers } from \"~/utils/gatsby-types\"\nimport { usingGatsbyV4OrGreater } from \"~/utils/gatsby-version\"\ninterface IProcessorOptions {\n  userPluginOptions: IPluginOptions\n  helpers: GatsbyNodeApiHelpers\n}\n\ninterface IOptionsProcessor {\n  name: string\n  test: (options: IProcessorOptions) => boolean\n  processor: (options: IProcessorOptions) => IPluginOptions | void\n}\n\nconst optionsProcessors: Array<IOptionsProcessor> = [\n  {\n    name: `pluginOptions.type.MediaItem.limit is not allowed`,\n    test: ({ userPluginOptions }): boolean =>\n      !!userPluginOptions?.type?.MediaItem?.limit,\n    processor: ({ helpers, userPluginOptions }): void => {\n      helpers.reporter.panic(\n        formatLogMessage(\n          `PluginOptions.type.MediaItem.limit is an disallowed plugin option.\\nPlease remove the MediaItem.limit option from gatsby-config.js (currently set to ${userPluginOptions?.type?.MediaItem?.limit})\\n\\nMediaItem nodes are automatically limited to 0 and then fetched only when referenced by other node types. For example as a featured image, in custom fields, or in post_content.`\n        )\n      )\n    },\n  },\n  {\n    name: `queryDepth-is-not-a-positive-int`,\n    test: ({ userPluginOptions }: IProcessorOptions): boolean =>\n      typeof userPluginOptions?.schema?.queryDepth !== `undefined` &&\n      (!isInteger(userPluginOptions?.schema?.queryDepth) ||\n        userPluginOptions?.schema?.queryDepth <= 0),\n    processor: ({\n      helpers,\n      userPluginOptions,\n    }: IProcessorOptions): IPluginOptions => {\n      helpers.reporter.log(``)\n      helpers.reporter.warn(\n        formatLogMessage(\n          `\\n\\npluginOptions.schema.queryDepth is not a positive integer.\\nUsing default value in place of provided value.\\n`,\n          { useVerboseStyle: true }\n        )\n      )\n\n      delete userPluginOptions.schema.queryDepth\n\n      return userPluginOptions\n    },\n  },\n  {\n    name: `Require beforeChangeNode type setting functions by absolute or relative path`,\n    test: ({ userPluginOptions }: IProcessorOptions): boolean =>\n      !!userPluginOptions?.type,\n    processor: ({\n      helpers,\n      userPluginOptions,\n    }: IProcessorOptions): IPluginOptions => {\n      const gatsbyStore = helpers.store.getState()\n      const typeSettings = Object.entries(userPluginOptions.type)\n\n      typeSettings.forEach(([typeName, settings]) => {\n        const beforeChangeNodePath = settings?.beforeChangeNode\n\n        if (\n          usingGatsbyV4OrGreater &&\n          typeof beforeChangeNodePath === `function`\n        ) {\n          helpers.reporter.panic(\n            `Since Gatsby v4+ you cannot use the ${typeName}.beforeChangeNode option as a function. Please make the option a relative or absolute path to a JS file where the beforeChangeNode fn is the default export.`\n          )\n        }\n\n        if (!beforeChangeNodePath || typeof beforeChangeNodePath !== `string`) {\n          return\n        }\n\n        try {\n          const absoluteRequirePath: string | undefined = path.isAbsolute(\n            beforeChangeNodePath\n          )\n            ? beforeChangeNodePath\n            : require.resolve(\n                path.join(gatsbyStore.program.directory, beforeChangeNodePath)\n              )\n\n          const beforeChangeNodeFn = require(absoluteRequirePath)\n\n          if (beforeChangeNodeFn) {\n            userPluginOptions.type[typeName].beforeChangeNode =\n              beforeChangeNodeFn\n          }\n        } catch (e) {\n          helpers.reporter.panic(\n            formatLogMessage(\n              `beforeChangeNode type setting for ${typeName} threw error:\\n${e.message}`\n            )\n          )\n        }\n      })\n\n      return userPluginOptions\n    },\n  },\n]\n\nexport const processAndValidatePluginOptions = (\n  helpers: GatsbyNodeApiHelpers,\n  pluginOptions: IPluginOptions\n): IPluginOptions => {\n  let userPluginOptions = {\n    ...pluginOptions,\n  }\n\n  optionsProcessors.forEach(({ test, processor, name }) => {\n    if (!name) {\n      helpers.reporter.panic(\n        formatLogMessage(\n          `Plugin option filter is unnamed\\n\\n${test.toString()}\\n\\n${processor.toString()}`\n        )\n      )\n    }\n\n    if (test({ helpers, userPluginOptions })) {\n      const filteredUserPluginOptions = processor({\n        helpers,\n        userPluginOptions,\n      })\n\n      if (filteredUserPluginOptions) {\n        userPluginOptions = filteredUserPluginOptions\n      } else {\n        helpers.reporter.panic(\n          formatLogMessage(\n            `Plugin option filter ${name} didn't return a filtered options object`\n          )\n        )\n      }\n    }\n  })\n\n  // remove auth from pluginOptions so we don't leak into the browser\n  delete pluginOptions.auth\n\n  return userPluginOptions\n}\n"],"file":"process-and-validate-plugin-options.js"}